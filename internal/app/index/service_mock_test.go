// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package index is a generated GoMock package.
package index

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSearchClient is a mock of SearchClient interface
type MockSearchClient struct {
	ctrl     *gomock.Controller
	recorder *MockSearchClientMockRecorder
}

// MockSearchClientMockRecorder is the mock recorder for MockSearchClient
type MockSearchClientMockRecorder struct {
	mock *MockSearchClient
}

// NewMockSearchClient creates a new mock instance
func NewMockSearchClient(ctrl *gomock.Controller) *MockSearchClient {
	mock := &MockSearchClient{ctrl: ctrl}
	mock.recorder = &MockSearchClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSearchClient) EXPECT() *MockSearchClientMockRecorder {
	return m.recorder
}

// Search mocks base method
func (m *MockSearchClient) Search(ctx context.Context, q Query) ([]*Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, q)
	ret0, _ := ret[0].([]*Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockSearchClientMockRecorder) Search(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSearchClient)(nil).Search), ctx, q)
}

// MockSuggestionsClient is a mock of SuggestionsClient interface
type MockSuggestionsClient struct {
	ctrl     *gomock.Controller
	recorder *MockSuggestionsClientMockRecorder
}

// MockSuggestionsClientMockRecorder is the mock recorder for MockSuggestionsClient
type MockSuggestionsClientMockRecorder struct {
	mock *MockSuggestionsClient
}

// NewMockSuggestionsClient creates a new mock instance
func NewMockSuggestionsClient(ctrl *gomock.Controller) *MockSuggestionsClient {
	mock := &MockSuggestionsClient{ctrl: ctrl}
	mock.recorder = &MockSuggestionsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSuggestionsClient) EXPECT() *MockSuggestionsClientMockRecorder {
	return m.recorder
}

// TrackResults mocks base method
func (m *MockSuggestionsClient) TrackResults(ctx context.Context, q Query, rr []*Result) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrackResults", ctx, q, rr)
	ret0, _ := ret[0].(error)
	return ret0
}

// TrackResults indicates an expected call of TrackResults
func (mr *MockSuggestionsClientMockRecorder) TrackResults(ctx, q, rr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackResults", reflect.TypeOf((*MockSuggestionsClient)(nil).TrackResults), ctx, q, rr)
}

// Suggest mocks base method
func (m *MockSuggestionsClient) Suggest(ctx context.Context, q Query) ([]*Suggestion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Suggest", ctx, q)
	ret0, _ := ret[0].([]*Suggestion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Suggest indicates an expected call of Suggest
func (mr *MockSuggestionsClientMockRecorder) Suggest(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Suggest", reflect.TypeOf((*MockSuggestionsClient)(nil).Suggest), ctx, q)
}
